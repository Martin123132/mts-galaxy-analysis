{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MTS Galaxy Rotation Curve Analysis - Tutorial\n",
    "\n",
    "This notebook demonstrates how to:\n",
    "1. Fit rotation curves with the MTS exponential model\n",
    "2. Analyze mass-velocity scaling\n",
    "3. Make predictions for new galaxies\n",
    "4. Visualize results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.stats import linregress\n",
    "\n",
    "# Import our analysis code\n",
    "from src.mts_analysis import (\n",
    "    SPARC_DATA,\n",
    "    mts_model,\n",
    "    fit_rotation_curve,\n",
    "    analyze_mass_velocity_scaling,\n",
    "    plot_rotation_curves,\n",
    "    plot_mass_velocity_scaling\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1: Fitting Individual Rotation Curves\n",
    "\n",
    "Let's start by fitting a single galaxy's rotation curve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pick a galaxy - let's use NGC 2403\n",
    "galaxy = SPARC_DATA['NGC_2403']\n",
    "\n",
    "print(f\"Galaxy: NGC 2403\")\n",
    "print(f\"Baryonic mass: {galaxy['M_total']:.1f} × 10^9 M_sun\")\n",
    "print(f\"Stellar mass: {galaxy['M_star']:.1f} × 10^9 M_sun\")\n",
    "print(f\"Gas mass: {galaxy['M_gas']:.1f} × 10^9 M_sun\")\n",
    "print(f\"Data points: {len(galaxy['r'])}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the rotation curve\n",
    "fit_result = fit_rotation_curve(galaxy['r'], galaxy['v'])\n",
    "\n",
    "print(\"\\nFit Results:\")\n",
    "print(f\"Asymptotic velocity (a): {fit_result['a']:.1f} km/s\")\n",
    "print(f\"Characteristic scale (1/b): {1/fit_result['b']:.2f} kpc\")\n",
    "print(f\"RMSE: {fit_result['rmse']:.2f} km/s\")\n",
    "print(f\"R²: {fit_result['r2']:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize the fit\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Observed data\n",
    "plt.plot(galaxy['r'], galaxy['v'], 'ko', markersize=8, label='Observed')\n",
    "\n",
    "# Model fit\n",
    "r_smooth = np.linspace(0, np.max(galaxy['r']), 200)\n",
    "v_smooth = mts_model(r_smooth, fit_result['a'], fit_result['b'])\n",
    "plt.plot(r_smooth, v_smooth, 'r-', linewidth=2, label='MTS Model')\n",
    "\n",
    "# Asymptotic velocity line\n",
    "plt.axhline(fit_result['a'], color='blue', linestyle='--', alpha=0.5, \n",
    "            label=f'v_∞ = {fit_result[\"a\"]:.1f} km/s')\n",
    "\n",
    "plt.xlabel('Radius (kpc)', fontsize=12)\n",
    "plt.ylabel('Rotation Velocity (km/s)', fontsize=12)\n",
    "plt.title('NGC 2403 Rotation Curve', fontsize=14)\n",
    "plt.legend(fontsize=11)\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2: Mass-Velocity Scaling Analysis\n",
    "\n",
    "Now let's analyze all galaxies to find the scaling relation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run full analysis\n",
    "analysis = analyze_mass_velocity_scaling(SPARC_DATA)\n",
    "\n",
    "print(\"Mass-Velocity Scaling Relation\")\n",
    "print(\"=\"*50)\n",
    "print(f\"\\nPower law: a = k × M^α\")\n",
    "print(f\"  k = {analysis['k']:.2f} km/s\")\n",
    "print(f\"  α = {analysis['alpha']:.3f}\")\n",
    "print(f\"\\nStatistics:\")\n",
    "print(f\"  R² = {analysis['r2']:.4f}\")\n",
    "print(f\"  Correlation r = {analysis['r_value']:.4f}\")\n",
    "print(f\"  p-value = {analysis['p_value']:.2e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate error statistics\n",
    "errors = [abs(r['error_pct']) for r in analysis['results']]\n",
    "\n",
    "print(\"\\nPrediction Accuracy\")\n",
    "print(\"=\"*50)\n",
    "print(f\"Mean absolute error: {np.mean(errors):.2f}%\")\n",
    "print(f\"Median error: {np.median(errors):.2f}%\")\n",
    "print(f\"Std deviation: {np.std(errors):.2f}%\")\n",
    "print(f\"\\nGalaxies within 10% error: {sum(1 for e in errors if e < 10)}/{len(errors)}\")\n",
    "print(f\"Galaxies within 15% error: {sum(1 for e in errors if e < 15)}/{len(errors)}\")\n",
    "print(f\"Galaxies within 25% error: {sum(1 for e in errors if e < 25)}/{len(errors)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize the scaling relation\n",
    "fig = plot_mass_velocity_scaling(analysis)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3: Making Predictions\n",
    "\n",
    "Use the scaling relation to predict rotation velocities for new galaxies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Predict velocity for a galaxy with known mass\n",
    "def predict_velocity(M_baryon, k=50.6, alpha=0.313):\n",
    "    \"\"\"\n",
    "    Predict asymptotic rotation velocity from baryonic mass.\n",
    "    \n",
    "    Parameters:\n",
    "    -----------\n",
    "    M_baryon : float\n",
    "        Baryonic mass in 10^9 M_sun\n",
    "    k, alpha : float\n",
    "        Scaling relation parameters\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    v_pred : float\n",
    "        Predicted asymptotic velocity in km/s\n",
    "    \"\"\"\n",
    "    return k * M_baryon**alpha\n",
    "\n",
    "# Test cases\n",
    "test_masses = [1, 5, 10, 50, 100, 300]  # in 10^9 M_sun\n",
    "\n",
    "print(\"Velocity Predictions:\")\n",
    "print(\"=\"*50)\n",
    "for M in test_masses:\n",
    "    v_pred = predict_velocity(M)\n",
    "    print(f\"M = {M:5.1f} × 10⁹ M☉  →  v_∞ = {v_pred:6.1f} km/s\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reverse prediction: estimate mass from velocity\n",
    "def predict_mass(v_asymp, k=50.6, alpha=0.313):\n",
    "    \"\"\"\n",
    "    Predict baryonic mass from asymptotic rotation velocity.\n",
    "    \n",
    "    Parameters:\n",
    "    -----------\n",
    "    v_asymp : float\n",
    "        Asymptotic rotation velocity in km/s\n",
    "    k, alpha : float\n",
    "        Scaling relation parameters\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    M_pred : float\n",
    "        Predicted baryonic mass in 10^9 M_sun\n",
    "    \"\"\"\n",
    "    return (v_asymp / k)**(1/alpha)\n",
    "\n",
    "# Test cases\n",
    "test_velocities = [50, 75, 100, 150, 200, 250]  # km/s\n",
    "\n",
    "print(\"\\nMass Predictions:\")\n",
    "print(\"=\"*50)\n",
    "for v in test_velocities:\n",
    "    M_pred = predict_mass(v)\n",
    "    print(f\"v_∞ = {v:3d} km/s  →  M = {M_pred:6.1f} × 10⁹ M☉\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 4: Adding Your Own Galaxy\n",
    "\n",
    "Here's how to test the relation on a new galaxy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: A hypothetical dwarf galaxy\n",
    "my_galaxy = {\n",
    "    'r': np.array([1, 2, 3, 4, 5, 6]),  # kpc\n",
    "    'v': np.array([25, 40, 50, 55, 58, 60]),  # km/s\n",
    "    'M_star': 2.5,  # 10^9 M_sun (estimated)\n",
    "    'M_gas': 1.8,   # 10^9 M_sun (from HI)\n",
    "    'M_total': 4.3,  # Total baryonic\n",
    "    'source': 'My Observation'\n",
    "}\n",
    "\n",
    "# Fit the rotation curve\n",
    "my_fit = fit_rotation_curve(my_galaxy['r'], my_galaxy['v'])\n",
    "\n",
    "# Predict velocity from mass\n",
    "v_predicted = predict_velocity(my_galaxy['M_total'])\n",
    "\n",
    "# Compare\n",
    "print(\"Your Galaxy Analysis:\")\n",
    "print(\"=\"*50)\n",
    "print(f\"Baryonic mass: {my_galaxy['M_total']:.1f} × 10⁹ M☉\")\n",
    "print(f\"Fitted v_∞: {my_fit['a']:.1f} km/s\")\n",
    "print(f\"Predicted v_∞: {v_predicted:.1f} km/s\")\n",
    "print(f\"Error: {100*(v_predicted - my_fit['a'])/my_fit['a']:.1f}%\")\n",
    "print(f\"Fit quality (R²): {my_fit['r2']:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize your galaxy\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "plt.plot(my_galaxy['r'], my_galaxy['v'], 'ko', markersize=10, label='Your Data')\n",
    "\n",
    "r_smooth = np.linspace(0, np.max(my_galaxy['r']), 200)\n",
    "v_fit = mts_model(r_smooth, my_fit['a'], my_fit['b'])\n",
    "plt.plot(r_smooth, v_fit, 'r-', linewidth=2, label='Fitted Model')\n",
    "\n",
    "plt.axhline(my_fit['a'], color='red', linestyle='--', alpha=0.5,\n",
    "           label=f'Fitted: {my_fit[\"a\"]:.1f} km/s')\n",
    "plt.axhline(v_predicted, color='blue', linestyle=':', alpha=0.5,\n",
    "           label=f'Predicted: {v_predicted:.1f} km/s')\n",
    "\n",
    "plt.xlabel('Radius (kpc)', fontsize=12)\n",
    "plt.ylabel('Rotation Velocity (km/s)', fontsize=12)\n",
    "plt.title('Your Galaxy - MTS Analysis', fontsize=14)\n",
    "plt.legend(fontsize=11)\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 5: Comparison with SPARC Sample\n",
    "\n",
    "See where your galaxy fits in the broader sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract SPARC data\n",
    "sparc_masses = [d['M_total'] for d in SPARC_DATA.values()]\n",
    "sparc_fits = [fit_rotation_curve(d['r'], d['v']) for d in SPARC_DATA.values()]\n",
    "sparc_velocities = [f['a'] for f in sparc_fits]\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10, 8))\n",
    "\n",
    "# SPARC sample\n",
    "plt.loglog(sparc_masses, sparc_velocities, 'o', color='blue', \n",
    "          markersize=8, alpha=0.6, label='SPARC Sample')\n",
    "\n",
    "# Scaling relation\n",
    "M_range = np.logspace(-0.5, 2.5, 100)\n",
    "v_relation = predict_velocity(M_range)\n",
    "plt.loglog(M_range, v_relation, 'r-', linewidth=2,\n",
    "          label=f'MTS: v = {analysis[\"k\"]:.1f} × M$^{{{analysis[\"alpha\"]:.2f}}}$')\n",
    "\n",
    "# Your galaxy\n",
    "plt.loglog(my_galaxy['M_total'], my_fit['a'], 's', color='green',\n",
    "          markersize=15, label='Your Galaxy', zorder=5)\n",
    "\n",
    "plt.xlabel('Baryonic Mass (10⁹ M☉)', fontsize=12)\n",
    "plt.ylabel('Asymptotic Velocity (km/s)', fontsize=12)\n",
    "plt.title('Your Galaxy in Context', fontsize=14)\n",
    "plt.legend(fontsize=11)\n",
    "plt.grid(True, alpha=0.3, which='both')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "You've learned how to:\n",
    "1. ✅ Fit rotation curves with the MTS exponential model\n",
    "2. ✅ Analyze mass-velocity scaling across multiple galaxies\n",
    "3. ✅ Make predictions (forward and reverse)\n",
    "4. ✅ Test new galaxies against the relation\n",
    "\n",
    "**Key Finding**: \n",
    "```\n",
    "v_∞ = 50.6 × M^0.31 km/s\n",
    "```\n",
    "\n",
    "This sublinear scaling (α = 0.31 < 0.5) is significantly different from Newtonian expectations and holds across 775× in mass range with ~9% mean error."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
